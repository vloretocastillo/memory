{"version":3,"sources":["components/card.js","components/game.js","App.js","index.js","cards.js"],"names":["Card","handleClick","e","props","handleCardReveal","id","classes","this","foundMatch","isRevealed","onClick","className","value","React","Component","Game","state","cards","generateCards","map","el","index","key","name","isOpen","flipCardsBack","filter","length","newCards","setState","openMe","checkForMatch","revealedCards","isAMatch","handleMatch","cardA","cardB","indexOf","resetGame","sort","Math","random","setTimeout","alert","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"oMAoCeA,G,iNAhCXC,YAAc,SAACC,GACX,EAAKC,MAAMC,iBAAkB,EAAKD,MAAME,K,wEAIjC,IAEHC,EAFE,OAUN,OANIA,EADAC,KAAKJ,MAAMK,YAAcD,KAAKJ,MAAMM,WAC1B,0BAEA,kBAKV,yBAAKC,QAAU,SAACR,GAAD,OAAM,EAAKD,YAAYC,KAClC,yBAAMS,UAAU,kBACZ,yBAAKN,GAAKE,KAAKJ,MAAME,GAAKM,UAAWL,GACjC,yBAAKK,UAAU,oBAEf,yBAAKA,UAAU,kBACVJ,KAAKJ,MAAMS,c,GAxBrBC,IAAMC,Y,OCwFVC,E,2MArFXC,MAAQ,CACJC,MAAOA,S,EAGXC,cAAgB,SAACD,GAAD,OAAWA,EAAME,KAAK,SAACC,EAAIC,GAAL,OAAc,kBAAC,EAAD,CAAMjB,iBAAmB,EAAKA,iBAAmBC,GAAKe,EAAGf,GAAMiB,IAAMD,EAAQT,MAAQQ,EAAGG,KAAOd,WAAaW,EAAGI,OAAShB,WAAaY,EAAGZ,iB,EAE5LiB,cAAgB,WAAO,IACbR,EAAU,EAAKD,MAAfC,MAEN,GAA6B,IADPA,EAAMS,QAAO,SAAAN,GAAE,OAAmB,IAAdA,EAAGI,SAAqC,IAAlBJ,EAAGZ,cACjDmB,OAAc,CAC5B,IAAIC,EAAWX,EAAME,KAAI,SAAAC,GAErB,OADkB,IAAdA,EAAGI,SAAqC,IAAlBJ,EAAGZ,aAAsBY,EAAGI,QAAS,GACxDJ,KAEX,EAAKS,SAAS,CAAEZ,MAAQW,M,EAKhCE,OAAS,SAACzB,GAAQ,IACRY,EAAU,EAAKD,MAAfC,MACNA,EAAQA,EAAME,KAAI,SAAAC,GAEd,OADIA,EAAGf,KAAOA,IAAIe,EAAGI,QAAS,GACvBJ,KAEX,EAAKS,SAAS,CAAEZ,MAAQA,K,EAG5Bc,cAAgB,WAAO,IAEbC,EADU,EAAKhB,MAAfC,MACsBS,QAAO,SAAAN,GAAE,OAAmB,IAAdA,EAAGI,SAAqC,IAAlBJ,EAAGZ,cACtC,IAAzBwB,EAAcL,QAET,EAAKM,SAASD,EAAc,GAAIA,EAAc,KAC/C,EAAKE,YAAYF,EAAc,GAAIA,EAAc,K,EAK7D5B,iBAAmB,SAACC,GAEhB,EAAKoB,gBACL,EAAKK,OAAOzB,GACZ,EAAK0B,iB,EAGTE,SAAW,SAACE,EAAOC,GAAY,OAAOD,EAAMZ,OAASa,EAAMb,M,EAE3DW,YAAc,SAACC,EAAOC,GAAW,IAErBnB,EAAU,EAAKD,MAAfC,MACRA,EAAMA,EAAMoB,QAAQF,IAAQ3B,YAAa,EACzCS,EAAMA,EAAMoB,QAAQD,IAAQ5B,YAAa,EAEzC,EAAKqB,SAAS,CAAEZ,MAAQA,K,EAQ5BqB,UAAY,WAAO,IACTrB,EAAU,EAAKD,MAAfC,MAMNA,GALAA,EAAQA,EAAME,KAAI,SAAAC,GAGd,OAFAA,EAAGZ,YAAa,EAChBY,EAAGI,QAAS,EACLJ,MAEGmB,MAAK,WAAQ,MAAO,GAAMC,KAAKC,YAC7C,EAAKZ,SAAS,CAAEZ,W,oFAXc,IADTV,KAAKS,MAAMC,MAAMS,QAAO,SAAAN,GAAE,OAAsB,IAAlBA,EAAGZ,cACnCmB,QAAce,YAAW,kBAAIC,MAAM,SAAQ,O,+BAgBvD,IAAD,OACN,OACI,yBAAKhC,UAAU,QACX,4BAAQA,UAAU,WAAWD,QAAS,kBAAM,EAAK4B,cAAjD,YACE/B,KAAKW,cAAcX,KAAKS,MAAMC,Y,GAhF7BJ,IAAMC,WCeV8B,E,2MAdX5B,MAAQ,G,wEAMJ,OACI,yBAAKL,UAAU,QACX,kBAAC,EAAD,W,GATEE,IAAMC,WCDxB+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,gBCHjD,IAAI/B,EAAQ,CACR,CACIM,KAAM,OACNC,QAAS,EACThB,YAAa,EACbH,GAAI,GAER,CACIkB,KAAM,OACNC,QAAS,EACThB,YAAa,EACbH,GAAI,GAER,CACIkB,KAAM,MACNC,QAAS,EACThB,YAAa,EACbH,GAAI,GAER,CACIkB,KAAM,MACNC,QAAS,EACThB,YAAa,EACbH,GAAI,GAER,CACIkB,KAAM,OACNC,QAAS,EACThB,YAAa,EACbH,GAAI,GAER,CACIkB,KAAM,OACNC,QAAS,EACThB,YAAa,EACbH,GAAI,GAER,CACIkB,KAAM,SACNC,QAAS,EACThB,YAAa,EACbH,GAAI,GAER,CACIkB,KAAM,SACNC,QAAS,EACThB,YAAa,EACbH,GAAI,GAER,CACIkB,KAAM,OACNC,QAAS,EACThB,YAAa,EACbH,GAAI,GAER,CACIkB,KAAM,OACNC,QAAS,EACThB,YAAa,EACbH,GAAI,GAGR,CACIkB,KAAM,OACNC,QAAS,EACThB,YAAa,EACbH,GAAI,IAER,CACIkB,KAAM,OACNC,QAAS,EACThB,YAAa,EACbH,GAAI,KA6BZY,EAAgBA,EADasB,MAAK,WAAQ,MAAO,GAAMC,KAAKC,YAI5DQ,EAAOC,QAAU,CAAEjC,U","file":"static/js/main.ce6961bb.chunk.js","sourcesContent":["import React from 'react';\n\nclass Card extends React.Component {\n   \n    handleClick = (e) => {\n        this.props.handleCardReveal( this.props.id )\n    }\n\n\n    render () {\n\n        let classes;\n        if (this.props.foundMatch || this.props.isRevealed) {\n            classes = \"flip-card-inner flipped\"\n        } else {\n            classes = \"flip-card-inner\"\n        }\n\n\n        return (\n            <div onClick={ (e)=> this.handleClick(e) }>\n                <div  className=\"flip-card card\">\n                    <div id={ this.props.id } className={classes}>\n                        <div className=\"flip-card-front\">\n                        </div>\n                        <div className=\"flip-card-back\">\n                            {this.props.value}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n        )\n    }\n}\n\nexport default Card;","import React from 'react';\nimport Card from './card'\nimport { cards } from '../cards'\n\nclass Game extends React.Component {\n    state = {\n        cards: cards\n    }\n\n    generateCards = (cards) => cards.map( (el, index)=> <Card handleCardReveal={ this.handleCardReveal } id={ el.id }  key={ index } value={ el.name } isRevealed={ el.isOpen } foundMatch={ el.foundMatch }/> )\n\n    flipCardsBack = () => {\n        let { cards } = this.state\n        const revealedCards = cards.filter(el => (el.isOpen === true && el.foundMatch === false) )\n        if (revealedCards.length === 2) { \n            let newCards = cards.map(el => {\n                if( el.isOpen === true && el.foundMatch === false) el.isOpen = false \n                return el \n            })\n            this.setState({ cards : newCards })\n        }\n\n    }\n\n    openMe = (id) => {\n        let { cards } = this.state\n        cards = cards.map(el => {\n            if (el.id === id) el.isOpen = true\n            return el\n        })\n        this.setState({ cards : cards })\n    }\n\n    checkForMatch = () => {\n        let { cards } = this.state\n        const revealedCards = cards.filter(el => (el.isOpen === true && el.foundMatch === false) )\n        if (revealedCards.length === 2) { \n           \n            if ( this.isAMatch(revealedCards[0], revealedCards[1]) ) {\n                this.handleMatch(revealedCards[0], revealedCards[1])\n            } \n        }\n    }\n\n    handleCardReveal = (id) => {\n\n        this.flipCardsBack()\n        this.openMe(id)\n        this.checkForMatch()\n    }\n\n    isAMatch = (cardA, cardB) => { return cardA.name === cardB.name ? true : false }\n\n    handleMatch = (cardA, cardB) => {\n\n        const { cards } = this.state\n        cards[cards.indexOf(cardA)].foundMatch = true \n        cards[cards.indexOf(cardB)].foundMatch = true \n\n        this.setState({ cards : cards })\n    }\n\n    componentDidUpdate() {\n        let nonMatchedOnes = this.state.cards.filter(el => el.foundMatch === false)\n        if (nonMatchedOnes.length === 0) setTimeout(()=>alert('yay'), 500 )\n    }\n\n    resetGame = () => {\n        let { cards } = this.state\n        cards = cards.map(el => {\n            el.foundMatch = false\n            el.isOpen = false\n            return el\n        })\n        cards = cards.sort(() => { return 0.5 - Math.random() })\n        this.setState({ cards })\n    }\n\n   \n   \n    render () {\n        return (\n            <div className='game'> \n                <button className=\"new-game\" onClick={() => this.resetGame()}>New Game</button>\n                { this.generateCards(this.state.cards) }\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport './css/app.css';\nimport Game from './components/game'\n\nclass App extends React.Component {\n    state = {\n    }\n\n    \n\n    render () {\n        return (\n            <div className='main'>\n                <Game />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'))\n","let cards = [\n    {\n        name: 'bird',\n        isOpen : false,\n        foundMatch : false,\n        id: 0\n    },\n    {\n        name: 'bird',\n        isOpen : false,\n        foundMatch : false,\n        id: 1\n    },\n    {\n        name: 'cat',\n        isOpen : false,\n        foundMatch : false,\n        id: 2    \n    },\n    {\n        name: 'cat',\n        isOpen : false,\n        foundMatch : false,\n        id: 3   \n    },\n    {\n        name: 'blue',\n        isOpen : false,\n        foundMatch : false,\n        id: 4   \n    },\n    {\n        name: 'blue',\n        isOpen : false,\n        foundMatch : false,\n        id: 5   \n    },\n    {\n        name: 'lovely',\n        isOpen : false,\n        foundMatch : false,\n        id: 6   \n    },\n    {\n        name: 'lovely',\n        isOpen : false,\n        foundMatch : false,\n        id: 7   \n    },\n    {\n        name: 'tree',\n        isOpen : false,\n        foundMatch : false,\n        id: 8 \n    },\n    {\n        name: 'tree',\n        isOpen : false,\n        foundMatch : false,\n        id: 9 \n    },\n\n    {\n        name: 'home',\n        isOpen : false,\n        foundMatch : false,\n        id: 10 \n    },\n    {\n        name: 'home',\n        isOpen : false,\n        foundMatch : false,\n        id: 11\n    },\n\n    \n    // {\n    //     name: 'cloud',\n    //     isOpen : false,\n    //     foundMatch : false    \n    // },\n    // {\n    //     name: 'lovely',\n    //     isOpen : false,\n    //     foundMatch : false    \n    // },\n    // {\n    //     name: 'leaf',\n    //     isOpen : false,\n    //     foundMatch : false    \n    // },\n    // {\n    //     name: 'toy',\n    //     isOpen : false,\n    //     foundMatch : false    \n    // }\n]\n\n\n// cards = [...cards, ...cards] \nconst shuffle = (arr) => arr.sort(() => { return 0.5 - Math.random() })\ncards = shuffle(cards)\n// console.log(cards.length)\n\nmodule.exports = { cards }"],"sourceRoot":""}